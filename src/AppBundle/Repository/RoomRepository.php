<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Message;
use AppBundle\Entity\Room;
use AppBundle\Entity\RoomMessage;
use AppBundle\Entity\User;
use Carbon\Carbon;
use Doctrine\ORM\EntityRepository;

/**
 * RoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoomRepository extends EntityRepository
{
    public function roomsWithUser(User $user)
    {
        $rooms = $this->createQueryBuilder('r')
            ->leftJoin('r.users', 'u')
            ->andWhere('u.id IN (:ids)')
            ->setParameter('ids', $user->getId())
            ->getQuery();

        return $rooms;
    }

    public function save(Room $room)
    {
        $newInstance = false;

        if (!$room->getCreatedAt()) {
            $newInstance = true;
            $room->setCreatedAt(Carbon::now());
        }

        $this->getEntityManager()->persist($room);
        $this->getEntityManager()->flush();

        if ($newInstance) {

            $repository = $this->getEntityManager()->getRepository(RoomMessage::class);
            foreach ($room->getUsers() as $user) {
                /** @var User $user */
                $message = new Message();
                $message->setInfoText(Message::joinChat, $user->getUsername());
                $this->getEntityManager()->persist($message);
                $this->getEntityManager()->flush();
                $repository->saveRoomMessages($message, $room, Null, $info=true);
            }
        }

        return $room;
    }

    /**
     * Delete room
     *
     * @param Room $room
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete(Room $room)
    {
        $this->getEntityManager()->remove($room);
        $this->getEntityManager()->flush();
    }
}
